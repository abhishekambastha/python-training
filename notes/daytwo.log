Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> from random import *
>>> random()
0.6288838137874768
>>> random()                    # 0.0 <= x < 1.0
0.1565948342071649
>>> random() * 100.0            # 0.0 <= x < 100.0
35.5302745468197
>>> 
>>> # int / frac
>>> # int() gives you the signed integer portion of the number
>>> # frac() gives you the signed fractional component of the number
>>> int(3.7)
3
>>> type(_)
<type 'int'>
>>> int(-3.7)
-3
>>> # int is symmetric around the origin
>>> # frac = n - int(n)
>>> x = 3.7
>>> x - int(x)
0.7000000000000002
>>> x = -3.7
>>> x - int(x)
-0.7000000000000002
>>> 
>>> from math import ceil, floor
>>> ceil(3.7)
4.0
>>> ceil(-3.7)
-3.0
>>> # ceil is assymmetric around the origin
>>> floor(3.7)
3.0
>>> floor(-3.7)
-4.0
>>> type(_)
<type 'float'>
>>> 
>>> round(3.7)
4.0
>>> round(3.2)
3.0
>>> round(-3.7)
-4.0
>>> round(-3.2)
-3.0
>>> # round() is like int() and is symmetric
>>> 
>>> round(3.5)
4.0
>>> round(4.5)
5.0
>>> round(-3.5)
-4.0
>>> round(-4.5)
-5.0
>>> # rule in python 2 is round-half-away-from-zero
>>> # rule in python 3 is round-half-even
>>> 
>>> 
>>> int(random() * 100.0)        # 0 <= x < 100
21
>>> # rule:  give a name to common pattersn
>>> # rule:  model an api after what people already know
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10)
[2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10, 3)
[2, 5, 8]
>>> randrange(10)
4
>>> randrange(1000, 2000, 100)
1700
>>> range(1000, 2000, 100)
[1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]
>>> randrange(1000, 2000, 100)
1300
>>> randrange(1000, 2000, 100)
1600
>>> 
>>> 
>>> # list comprehensions:  [<expr> for <var> in <iterable>]
>>> # list comprehensions:  [<expr> for <var> in <iterable> if <cond>]
>>> [i**2 for i in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> 
>>> [randrange(10) for i in range(20)]
[4, 2, 5, 2, 3, 1, 1, 2, 5, 4, 3, 0, 8, 7, 7, 2, 5, 8, 2, 5]
>>> 
>>> 
>>> outcomes = 'win lose draw'.split()
>>> outcomes[int(random() * len(outcomes))]
'lose'
>>> outcomes[randrange(len(outcomes))]
'win'
>>> choice(outcomes)
'draw'
>>> [choice(outcomes) for i in range(10)]
['win', 'win', 'lose', 'win', 'win', 'draw', 'lose', 'lose', 'lose', 'draw']
>>> results = [choice(outcomes) for i in range(10)]
>>> results.count('win')
6
>>> results.count('lose')
1
>>> results.count('draw')
3
>>> # ^-- Sampling WITH replacement
>>> 
>>> 
>>> sample(outcomes, 2)
['win', 'draw']
>>> sample(outcomes, 2)
['draw', 'win']
>>> sample(outcomes, 2)
['lose', 'win']
>>> # ^-- Sampling WITHOUT replacement
>>> sample(outcomes, 3)
['draw', 'win', 'lose']
>>> sample(outcomes, 3)
['lose', 'draw', 'win']
>>> sample(outcomes, 10)

Traceback (most recent call last):
  File "<pyshell#80>", line 1, in <module>
    sample(outcomes, 10)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py", line 323, in sample
    raise ValueError("sample larger than population")
ValueError: sample larger than population
>>> 
>>> 
>>> 
>>> 
>>> sample(outcomes, 1)[0]
'win'
>>> choice(outcomes)
'win'
>>> 
>>> sample(outcomes, len(outcomes))
['draw', 'win', 'lose']
>>> shuffle(outcomes)
>>> outcomes
['win', 'draw', 'lose']
>>> 
>>> # choice()                sample()                  shuffle()
>>> # sample()[0]                                       sample(len(pop))
>>> 
>>> 
>>> from random import *
>>> dir()
['Random', 'SystemRandom', 'WichmannHill', '__builtins__', '__doc__', '__name__', '__package__', 'betavariate', 'ceil', 'choice', 'expovariate', 'floor', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'i', 'jumpahead', 'lognormvariate', 'normalvariate', 'outcomes', 'paretovariate', 'randint', 'random', 'randrange', 'results', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate', 'x']
>>> uniform(0.0, 100.0)
17.028162183898054
>>> random() * 100.0
15.384046545906427
>>> uniform(-20.0, 100.0)
6.671834721466201
>>> 
>>> 
>>> normalvariate(100.0, 20.0)
110.35412507155442
>>> expovariate(0.2)
8.792378950755777
>>> expovariate(0.2)
1.3546647743677143
>>> expovariate(0.2)
4.202086851704812
>>> expovariate(0.2)
2.905724736501865
>>> expovariate(0.2)
2.3237462588082516
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 25, in <module>
    circles = [Circle(random) for i in range(n)]
NameError: name 'random' is not defined
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> circles
[<circuitous.Circle object at 0x103b483d0>, <circuitous.Circle object at 0x103b48450>, <circuitous.Circle object at 0x103b48490>, <circuitous.Circle object at 0x103b48510>, <circuitous.Circle object at 0x103b48550>, <circuitous.Circle object at 0x103b48590>, <circuitous.Circle object at 0x103b48610>, <circuitous.Circle object at 0x103b485d0>, <circuitous.Circle object at 0x103b48690>, <circuitous.Circle object at 0x103b48650>]
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> pprint(circles)
[<circuitous.Circle object at 0x104247850>,
 <circuitous.Circle object at 0x104247890>,
 <circuitous.Circle object at 0x104247910>,
 <circuitous.Circle object at 0x104247990>,
 <circuitous.Circle object at 0x104247950>,
 <circuitous.Circle object at 0x1042479d0>,
 <circuitous.Circle object at 0x104247a50>,
 <circuitous.Circle object at 0x104247a90>,
 <circuitous.Circle object at 0x104247ad0>,
 <circuitous.Circle object at 0x104247a10>]
>>> Circle(10)
<circuitous.Circle object at 0x104239a90>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> Circle(10)
Circle(10)
>>> Circle(10)
Circle(10)
>>> Circle(math.pi)
Circle(3.14159265359)
>>> math.pi
3.141592653589793
>>> print math.pi
3.14159265359
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> pprint(circles)
[Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>)]
>>> pprint(circles)
[Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>),
 Circle(<built-in method random of Random object at 0x103839220>)]
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> pprint(circles)
[Circle(0.40224696110279223),
 Circle(0.5102471779215914),
 Circle(0.6637431122665531),
 Circle(0.8607166923395507),
 Circle(0.28094269977126785),
 Circle(0.6413941220751519),
 Circle(0.6472135534646176),
 Circle(0.22715569766295207),
 Circle(0.711696999899619),
 Circle(0.09115426983797148)]
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> pprint(areas)
[0.5083179151495382,
 0.8179205041298087,
 1.384044097288627,
 2.327396215536275,
 0.24796213997951547,
 1.2924085543325607,
 1.3159672444054562,
 0.16210527294445717,
 1.591256324893598,
 0.02610381037583005]
>>> sum(areas)
9.673482079035665
>>> len(areas)
10
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
>>> average_area
0.9673482079035665
>>> 
>>> # [:-i]   i, arr[i] = t
>>> # a, b = impf(), impf()
>>> 
>>> 32 / 5
6
>>> # (int / int) --> int
>>> def average(seq):
	return sum(seq) / len(seq)

>>> average([10, 20, 60])
30
>>> average([10, 20, 61])
30
>>> 4 / 3 +  7 / 3  +  1 / 3
3
>>> from __future__ import division
>>> 32 / 5
6.4
>>> average([10, 20, 60])
30
>>> def average(seq):
	return sum(seq) / len(seq)

>>> average([10, 20, 61])
30.333333333333332
>>> 4 / 3 +  7 / 3  +  1 / 3
4.0
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 0.967348207904
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 0.9673482079035665
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

>>> .1
0.1
>>> .1
0.1
>>> 
>>> 
>>> .1 + .1
0.2
>>> 0.2
0.2
>>> .2
0.2
>>> 
>>> 
>>> '''hello'''
'hello'
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
>>> circles
[Circle(0.1), Circle(0.2), Circle(0.7)]
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
Circle #1
Circle #2
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
Circle #1
A rubber circle with a cut radius of 0.2
Circle #2
A rubber circle with a cut radius of 0.7
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of
Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of
Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of
>>> random()
0.012479535411529796
>>> random() * 100
89.80497829309694
>>> random * 100

Traceback (most recent call last):
  File "<pyshell#156>", line 1, in <module>
    random * 100
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

>>> c = Circle(10)
>>> t = Tire(10)
>>> m = MonsterTire(10)
>>> c.perimeter()
62.83185307179586
>>> t.perimeter()
78.53981633974483
>>> m.perimeter()
94.24777960769379
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

>>> Circle(20)
Circle(20)
>>> Tire(20)
Circle(20)
>>> t.__class__
<class '__main__.Tire'>
>>> t.__class__.__name__
'Tire'
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.1
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

>>> c
Circle(10)
>>> t
Tire(30)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> angle_to_grade(5)
8.7488663525924
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5 degrees

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 73, in <module>
    print 'is a %r percent grade' % angle_to_grade(5)
NameError: name 'angle_to_grade' is not defined
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5 degrees
is a 8.7488663525924 percent grade
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°
is a 8.7488663525924 percent grade

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°
is a 8.7488663525924 percent grade

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°
is a 8.7 percent grade

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 73, in <module>
    print 'is a %.1f% grade' % angle_to_grade(5)
TypeError: not enough arguments for format string
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°
is a 8.7% grade

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

>>> 
=============================== RESTART: Shell ===============================
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

>>> dir(Circle)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'area', 'perimeter', 'version']
>>> help(Circle)
Help on class Circle in module circuitous:

class Circle(__builtin__.object)
 |  An advanced circle analytic toolkit
 |  
 |  Methods defined here:
 |  
 |  __init__(self, radius)
 |  
 |  __repr__(self)
 |      # Best practice for __repr__ is to look like how the object could have been creeated
 |      # The word "self" is a misnomer.  It should mean "you or your children"
 |  
 |  area(self)
 |      Perform quadrature on a planar shape of uniform revolution
 |  
 |  perimeter(self)
 |      Compute the closed line integral of the 2-D locus of points equidistant from a given point
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  version = Version(major=0, minor=5, micro=1)

>>> 
>>> #1 Truckers can't find angle to grade:  dir(Circle)
>>> #2 Ships are late because they used angle to grade
>>> 
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 4, in <module>
    from circuitous import Circle, angle_to_grade
ImportError: cannot import name angle_to_grade
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5°

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 73, in <module>
    print 'is a %.1f%% grade.' % angle_to_grade(5)
NameError: name 'angle_to_grade' is not defined
>>> dir(Circle)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'angle_to_grade', 'area', 'perimeter', 'version']
>>> help(Circle)
Help on class Circle in module circuitous:

class Circle(__builtin__.object)
 |  An advanced circle analytic toolkit
 |  
 |  Methods defined here:
 |  
 |  __init__(self, radius)
 |  
 |  __repr__(self)
 |      # Best practice for __repr__ is to look like how the object could have been creeated
 |      # The word "self" is a misnomer.  It should mean "you or your children"
 |  
 |  angle_to_grade(self, angle)
 |      Convert an inclinometer reading in degrees to a percent grade
 |  
 |  area(self)
 |      Perform quadrature on a planar shape of uniform revolution
 |  
 |  perimeter(self)
 |      Compute the closed line integral of the 2-D locus of points equidistant from a given point
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  version = Version(major=0, minor=5, micro=1)

>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

>>> c.area()
314.1592653589793
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.5
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

>>> from datetime import *
>>> import time
>>> time.time()
1456257672.311262
>>> time.ctime()
'Tue Feb 23 12:01:31 2016'
>>> matthew = datetime(2012, 2, 14)
>>> dir(matthew)
['__add__', '__class__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', 'astimezone', 'combine', 'ctime', 'date', 'day', 'dst', 'fromordinal', 'fromtimestamp', 'hour', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'microsecond', 'min', 'minute', 'month', 'now', 'replace', 'resolution', 'second', 'strftime', 'strptime', 'time', 'timetuple', 'timetz', 'today', 'toordinal', 'tzinfo', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset', 'utctimetuple', 'weekday', 'year']
>>> matthew.weekday()
1
>>> # year month day
>>> 
>>> ts = time.time() - 3600
>>> ts
1456254176.079331
>>> # alternative constructors --> these usually start with the preposition "from"
>>> datetime.fromtimestamp(ts)
datetime.datetime(2016, 2, 23, 11, 2, 56, 79331)
>>> 
>>> datetime.fromordinal(725000)
datetime.datetime(1985, 12, 25, 0, 0)
>>> datetime.fromordinal(745000)
datetime.datetime(2040, 9, 27, 0, 0)
>>> datetime.fromtimestamp(time.time())
datetime.datetime(2016, 2, 23, 12, 6, 42, 845166)
>>> datetime.now()
datetime.datetime(2016, 2, 23, 12, 7, 10, 248226)
>>> 
>>> 
>>> dict([('raymond', 42), ('rachel', 55)])            # list of tuples
{'rachel': 55, 'raymond': 42}
>>> dict(raymond=42, rachel=55)
{'rachel': 55, 'raymond': 42}
>>> dict([('raymond hettinger', 42), ('rachel', 55)])            # list of tuples
{'rachel': 55, 'raymond hettinger': 42}
>>> dict(raymond hettinger=42, rachel=55)
SyntaxError: invalid syntax
>>> dict(raymond=42, rachel=55)                        # keyword arguments
{'rachel': 55, 'raymond': 42}
>>> dict({'bill': 10})                                 # dict
{'bill': 10}
>>> 
>>> # dict()       or         {}
>>> # dict(keyword)          dict(list_of_tuples)          dict(anotherdict)
>>> 
>>> names = 'raymond rachel matthew'.split()
>>> numbers = [42, 55, 20]
>>> dict(names, numbers)

Traceback (most recent call last):
  File "<pyshell#211>", line 1, in <module>
    dict(names, numbers)
TypeError: dict expected at most 1 arguments, got 2
>>> 
>>> dict(zip(names, numbers))
{'matthew': 20, 'rachel': 55, 'raymond': 42}
>>> 
>>> 
>>> 
>>> number = 101
>>> names = 'raymond rachel matthew'.split()
>>> [number]
[101]
>>> [number] * len(names)
[101, 101, 101]
>>> zip(names, [number] * len(names))
[('raymond', 101), ('rachel', 101), ('matthew', 101)]
>>> dict(zip(names, [number] * len(names)))
{'matthew': 101, 'rachel': 101, 'raymond': 101}
>>> dict.fromkeys(names, number)
{'matthew': 101, 'rachel': 101, 'raymond': 101}
>>> 
>>> 
>>> dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> ['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
>>> 
>>> 
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> Circle(1).from_bbd(20)
Circle(7.071067811865475)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> Circle.from_bbd(20)
Circle(7.071067811865475)
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.6
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> Circle.from_bbd(10)
Circle(3.5355339059327373)
>>> Tire.from_bbd(10)
Circle(3.5355339059327373)
>>> 
>>> 
>>> 
>>> C = Circle
>>> C(10)
Circle(10)
>>> C = Tire
>>> C(10)
Tire(10)
>>> cls = Circle
>>> cls(10)
Circle(10)
>>> cls = Tire
>>> cls(10)
Tire(10)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> Circle.from_bbd(Circle, 10)
Circle(3.5355339059327373)
>>> Tire.from_bbd(Tire, 10)

Traceback (most recent call last):
  File "<pyshell#247>", line 1, in <module>
    Tire.from_bbd(Tire, 10)
NameError: name 'Tire' is not defined
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.6
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.


Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/client.py", line 78, in <module>
    c = Circle.from_bbd(25)
TypeError: from_bbd() takes exactly 2 arguments (1 given)
>>> 
>>> 
>>> 
>>> 
>>> Circle.from_bbd(Circle, 10)
Circle(3.5355339059327373)
>>> Tire.from_bbd(Tire, 10)
Tire(3.5355339059327373)
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.6
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> Circle.from_bbd(10)
Circle(3.5355339059327373)
>>> Tire.from_bbd(10)
Tire(3.5355339059327373)
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/sorting_dicts.py", line 13, in <module>
    pprint(sorted(resp, key=attrgetter('id')))
AttributeError: 'dict' object has no attribute 'id'
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[('status', 'up'), ('id', 1804), ('location', 'sj')]
[('status', 'down'), ('id', 1802), ('location', 'la')]
[('status', 'up'), ('id', 1801), ('location', 'nv')]
[('status', 'down'), ('id', 1805), ('location', 'tx')]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[('id', 1804), ('location', 'sj'), ('status', 'up')]
[('id', 1802), ('location', 'la'), ('status', 'down')]
[('id', 1801), ('location', 'nv'), ('status', 'up')]
[('id', 1805), ('location', 'tx'), ('status', 'down')]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')])
OrderedDict([('id', 1802), ('location', 'la'), ('status', 'down')])
OrderedDict([('id', 1801), ('location', 'nv'), ('status', 'up')])
OrderedDict([('id', 1805), ('location', 'tx'), ('status', 'down')])
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')]),
 OrderedDict([('id', 1802), ('location', 'la'), ('status', 'down')]),
 OrderedDict([('id', 1801), ('location', 'nv'), ('status', 'up')]),
 OrderedDict([('id', 1805), ('location', 'tx'), ('status', 'down')])]
>>> dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')]),
 OrderedDict([('id', 1802), ('location', 'la'), ('status', 'down')]),
 OrderedDict([('id', 1801), ('location', 'nv'), ('status', 'up')]),
 OrderedDict([('id', 1805), ('location', 'tx'), ('status', 'down')])]

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/sorting_dicts.py", line 26, in <module>
    print sorted(set(resp[0].items()) - set(ref.items()))
AttributeError: 'tuple' object has no attribute 'items'
>>> resp[0]
OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')])
>>> resp[0].items()
[('id', 1804), ('location', 'sj'), ('status', 'up')]
>>> ref.items()

Traceback (most recent call last):
  File "<pyshell#259>", line 1, in <module>
    ref.items()
AttributeError: 'tuple' object has no attribute 'items'
>>> ref
({'status': 'down', 'id': 1800, 'location': 'sj'},)
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')]),
 OrderedDict([('id', 1802), ('location', 'la'), ('status', 'down')]),
 OrderedDict([('id', 1801), ('location', 'nv'), ('status', 'up')]),
 OrderedDict([('id', 1805), ('location', 'tx'), ('status', 'down')])]
[('id', 1804), ('status', 'up')]
>>> dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj134/sorting_dicts.py =======
[{'id': 1801, 'location': 'nv', 'status': 'up'},
 {'id': 1802, 'location': 'la', 'status': 'down'},
 {'id': 1804, 'location': 'sj', 'status': 'up'},
 {'id': 1805, 'location': 'tx', 'status': 'down'}]
[OrderedDict([('id', 1804), ('location', 'sj'), ('status', 'up')]),
 OrderedDict([('id', 1802), ('location', 'la'), ('status', 'down')]),
 OrderedDict([('id', 1801), ('location', 'nv'), ('status', 'up')]),
 OrderedDict([('id', 1805), ('location', 'tx'), ('status', 'down')])]
[('id', 1804), ('status', 'up')]
[('id', 1804), ('status', 'up')]
>>> 
>>> 
>>> from autodiff import *
>>> x = Var(5.5)
>>> x
5.5
>>> x.dx
1.0
>>> 
>>> y = x + sin(3 * x + 2.5)
>>> y
5.649877209662952
>>> y.dx
3.9661138545600076
>>> 
>>> d(y)
3.9661138545600076
>>> d(3.5)
0.0
>>> 
>>> from decimal import Decimal
>>> x = Decimal('5.5')
>>> y = x ** 2 + 3 * x + 4
>>> y
Decimal('50.75')
>>> 
>>> from fractions import Fraction
>>> x = Fraction(11, 2)
>>> y = x ** 2 + 3 * x + 4
>>> y
Fraction(203, 4)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> c = Circle(10)
>>> c.area()
314.1592653589793
>>> c.perimeter()
62.83185307179586
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 4417.86466911
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> print '''A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.61944901
'''
A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.61944901

>>> # Dotted lookup of a.x  -->  inst a  -->  a.__class__   --> a.__class__.__bases__ --> AttributeError
>>> 
>>> t.__dict__
{'radius': 30}
>>> t.__class__.__dict__
dict_proxy({'perimeter': <function perimeter at 0x103957578>, 'RUBBER_RATIO': 1.25, '__module__': '__main__', '__doc__': 'Circle analytics with a perimeter corrected for the rubber on the tire'})
>>> t.__class__.__bases__[0].__dict__
dict_proxy({'perimeter': <function perimeter at 0x10393faa0>, '__module__': 'circuitous', 'area': <function area at 0x10393fa28>, 'angle_to_grade': <staticmethod object at 0x1038aede0>, 'from_bbd': <classmethod object at 0x1038aee18>, 'version': Version(major=0, minor=7, micro=1), '__repr__': <function __repr__ at 0x10393fb18>, '__dict__': <attribute '__dict__' of 'Circle' objects>, '__weakref__': <attribute '__weakref__' of 'Circle' objects>, '__doc__': 'An advanced circle analytic toolkit', '__init__': <function __init__ at 0x10393f9b0>})
>>> # t.area()
>>> 
>>> 
>>> 
>>> x = 10
>>> print x ** 2
100
>>> 
>>> x = 10
>>> x = 12
>>> print x ** 3
1728
>>> print x ** 2
144
>>> 
>>> 
>>> x =10
>>> _x = x
>>> 
>>> x = 12
>>> print x ** 3
1728
>>> 
>>> print _x ** 2
100
>>> 
>>> 
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 4417.86466911
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> 
>>> 
>>> x = 10
>>> _x = x
>>> 
>>> x = 12
>>> _x = x
>>> 
>>> print x ** 2
144
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> dir(t)
['RUBBER_RATIO', '_Tire_perimeter', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_perimeter', 'angle_to_grade', 'area', 'from_bbd', 'perimeter', 'radius', 'version']
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> x = 10
>>> _raymond_x = x
>>> 
>>> x = 12
>>> _becky_x = x
>>> 
>>> 
>>> print _raymond_x ** 2
100
>>> print _becky_x ** 3
1728
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.7
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.7
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> dir(t)
['RUBBER_RATIO', '_Circle__perimeter', '_Tire__perimeter', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'angle_to_grade', 'area', 'from_bbd', 'perimeter', 'radius', 'version']
>>> 
>>> 
>>> # OCP -- Open Closed Principle
>>> d = dict(toaster=15.67, iron=18.14)
>>> d['toaster']
15.67
>>> d['frying pan']

Traceback (most recent call last):
  File "<pyshell#342>", line 1, in <module>
    d['frying pan']
KeyError: 'frying pan'
>>> 
>>> d.get('toaster', 0.0)
15.67
>>> d.get('frying pan', 0.0)
0.0
>>> d.get('frying pan', float('inf'))
inf
>>> 
>>> 
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 9, in <module>
    print d
NameError: name 'd' is not defined
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67
>>> dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> price.__setitem__('iron', 18.14)
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 9, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 16, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> price
{'toaster': 15.67, 'iron': 18.14}
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 16, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> price
{'toaster': 15.67, 'iron': 18.14}
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 16, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> price
{'toaster': 15.67, 'iron': 18.14}
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
.
.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 17, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 15, in <module>
    print price['Toaster']
KeyError: 'Toaster'
>>> price
{'TOASTER': 15.67, 'IRON': 18.14}
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 19, in <module>
    print price['Frying Pan']
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py", line 12, in __getitem__
    return dict.__getitem__(self, key.upper())
KeyError: 'FRYING PAN'
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67
inf
>>> 
 RESTART: /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/case_insensitive_dict.py 
15.67
inf
inf
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.8
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> dir(c)
['_Circle__perimeter', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'angle_to_grade', 'area', 'from_bbd', 'perimeter', 'radius', 'version']
>>> c.__class__
<class 'circuitous.Circle'>
>>> c.__dict__
{'radius': 8.838834764831843}
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.8
A circle with a radius of 10.0
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.8
preliminary study using 10 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30.0 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> c.__dict__
{'diameter': 17.677669529663685}
>>> 
>>> 
>>> 
>>> c = Circle(10)
>>> c.__dict__
{'diameter': 20.0}
>>> c.radius
10.0
>>> c.radius = 15
>>> c.__dict__
{'diameter': 30.0}
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/circuitous.py =========
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.9
A circle with a radius of 10.0
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.9
preliminary study using 100000 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30.0 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> xrange(10)
xrange(10)
>>> sum(range(1000000))
499999500000
>>> sum(xrange(1000000))
499999500000
>>> 
>>> 
>>> import sys
>>> sys.getsizeof(())
56
>>> sys.getsizeof((1,))
64
>>> sys.getsizeof((1,2,))
72
>>> sys.getsizeof((1,2,3,))
80
>>> # 56 + len(t) * 8
>>> sys.getsizeof({})
280
>>> 280 / 56.
5.0
>>> 
>>> c.__class__
<class 'circuitous.Circle'>
>>> c.__dict__
{'diameter': 17.677669529663685}
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj134/client.py ===========
Tutorial for Circuitous™
Software version 0.9
A circle with a radius of 10.0
has an area of 314.159265359

DARPA grant proposal
to study the average area of random circles
using Circuitous version 0.9
preliminary study using 100000 circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the template [0.1, 0.2, 0.7]
Circle #0
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #1
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #2
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire of radius 30.0 inches
has an inner cut-out area of 2827.43338823
and a rubber corrected perimeter of 235.619449019

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonalof 25
has a radius of 8.83883476483
an area of 245.436926062
and a perimeter of 55.536036727

>>> c.__dict__

Traceback (most recent call last):
  File "<pyshell#384>", line 1, in <module>
    c.__dict__
AttributeError: 'Circle' object has no attribute '__dict__'
>>> 
>>> 
>>> 
>>> from collections import *
>>> 
>>> d = dict(raymond='red', rachel='blue', matthew='yellow')
>>> d
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> 
>>> d['matthew']
'yellow'
>>> d = OrderedDict()
>>> d['raymond'] = 'red'
>>> d['rachel'] = 'blue'
>>> d['matthew'] = 'yellow'
>>> d.keys()
['raymond', 'rachel', 'matthew']
>>> d.values()
['red', 'blue', 'yellow']
>>> d.items()
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> for k in d:
	print k

	
raymond
rachel
matthew
>>> # Via:  iron-port
>>> 
>>> len(d)
3
>>> d['raymond']
'red'
>>> d.keys()
['raymond', 'rachel', 'matthew']
>>> d['john'] = 'black'
>>> d['sue'] = 'orange''
SyntaxError: EOL while scanning string literal
>>> d['sue'] = 'orange'
>>> 
>>> d
OrderedDict([('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow'), ('john', 'black'), ('sue', 'orange')])
>>> 
>>> d.items()
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow'), ('john', 'black'), ('sue', 'orange')]
>>> sorted(d.items())
[('john', 'black'), ('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red'), ('sue', 'orange')]
>>> d = OrderedDict(sorted(d.items()))
>>> d
OrderedDict([('john', 'black'), ('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red'), ('sue', 'orange')])
>>> 
>>> 
>>> # lambda <- make_function
>>> 
>>> lambda x: x*x
<function <lambda> at 0x10159f848>
>>> (lambda x: x*x)(5)
25
>>> 100 + (lambda x: x*x)(5) + 50
175
>>> map(ord, 'Raymond')
[82, 97, 121, 109, 111, 110, 100]
>>> 
>>> map(lambda x: x**2, range(100))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801]
>>> 
>>> 
>>> # Key Function takes one argument and produces a sort key
>>> len('raymond')
7
>>> d.keys()
['john', 'matthew', 'rachel', 'raymond', 'sue']
>>> sorted(d.keys(), key=len)
['sue', 'john', 'rachel', 'matthew', 'raymond']
>>> 
>>> s = d.keys()
>>> deco = [(len(k), k) for k in s]
>>> deco
[(4, 'john'), (7, 'matthew'), (6, 'rachel'), (7, 'raymond'), (3, 'sue')]
>>> deco.sort()
>>> deco
[(3, 'sue'), (4, 'john'), (6, 'rachel'), (7, 'matthew'), (7, 'raymond')]
>>> [key for cnt, key in deco]
['sue', 'john', 'rachel', 'matthew', 'raymond']
>>> # DECORATE - SORT - UNDECORATE      Schwartzian Transform
>>> 
>>> sorted(d, key=len)
['sue', 'john', 'rachel', 'matthew', 'raymond']
>>> 
>>> 
>>> d.items()
[('john', 'black'), ('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red'), ('sue', 'orange')]
>>> sorted(d.items(), lambda t: len(t[0]))

Traceback (most recent call last):
  File "<pyshell#448>", line 1, in <module>
    sorted(d.items(), lambda t: len(t[0]))
TypeError: <lambda>() takes exactly 1 argument (2 given)
>>> sorted(d.items(), lambda name, color: len(name))
[('john', 'black'), ('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red'), ('sue', 'orange')]
>>> 
>>> 
>>> 
>>> 
>>> 
>>> sorted(d.items(), key=lambda t: len(t[0]))
[('sue', 'orange'), ('john', 'black'), ('rachel', 'blue'), ('matthew', 'yellow'), ('raymond', 'red')]
>>> nd = OrderDict(sorted(d.items(), key=lambda t: len(t[0])))

Traceback (most recent call last):
  File "<pyshell#456>", line 1, in <module>
    nd = OrderDict(sorted(d.items(), key=lambda t: len(t[0])))
NameError: name 'OrderDict' is not defined
n
>>> nd = OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
>>> nd
OrderedDict([('sue', 'orange'), ('john', 'black'), ('rachel', 'blue'), ('matthew', 'yellow'), ('raymond', 'red')])
>>> 
>>> 
>>> for item in nd.items():
	print item

	
('sue', 'orange')
('john', 'black')
('rachel', 'blue')
('matthew', 'yellow')
('raymond', 'red')
>>> nd = OrderedDict(sorted(d.items(), key=lambda t: t[0]))
>>> for item in nd.items():
	print item

	
('john', 'black')
('matthew', 'yellow')
('rachel', 'blue')
('raymond', 'red')
('sue', 'orange')
>>> nd = OrderedDict(sorted(d.items(), key=lambda t: t[1]))
>>> 
>>> for item in nd.items():
	print item

	
('john', 'black')
('rachel', 'blue')
('sue', 'orange')
('raymond', 'red')
('matthew', 'yellow')
>>> nd = OrderedDict(sorted(d.items(), key=lambda t: len(t[1])))
>>> for item in nd.items():
	print item

	
('raymond', 'red')
('rachel', 'blue')
('john', 'black')
('matthew', 'yellow')
('sue', 'orange')
>>> # regular dict has a hash table [(hashvalue, key, value), (None, None, None), (hv1, k1, v2)]
>>> 
>>> # Ordered dict has a hash table [(hashvalue, key, value), (None, None, None), (hv1, k1, v2)]
>>> # and a doubly linked list       k1 <--> k2 <--> k3
>>> 
>>> 
>>> 
>>> int('42')
42
>>> str(42)
'42'
>>> list('abc')
['a', 'b', 'c']
>>> list((10, 20, 30))
[10, 20, 30]
>>> tuple('abc')
('a', 'b', 'c')
>>> 
>>> 
>>> # The nature of truth:  All things start by being true.
>>> # False things:  1) Numbers equal to zero  2) Containers with a length of zero  3) None
>>> 
>>> bool(15)
True
>>> bool(0)
False
>>> bool(3.14)
True
>>> bool(0.0)
False
>>> bool(0 + 5j)
True
>>> bool(0 + 0j)
False
>>> bool('True')
True
>>> bool('False')
True
>>> len('False')
5
>>> bool('')
False
>>> bool([False, False])
True
>>> bool([False])
True
>>> bool([])
False
>>> bool(None)
False
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> int(0)
0
>>> bool({})
False
>>> bool([])
False
>>> 
>>> 
>>> bool(list())
False
>>> bool(int())
False
>>> bool(tuple())
False
>>> bool(set())
False
>>> bool(float())
False
>>> bool(complex())
False
>>> 
>>> 
>>> int()
0
>>> # arity of zero
>>> int()
0
>>> int('42')
42
>>> 
>>> 
>>> d = defaultdict(int)
>>> d['raymond'] = 42
>>> d
defaultdict(<type 'int'>, {'raymond': 42})
>>> d['raymond']
42
>>> d['rachel']
0
>>> d
defaultdict(<type 'int'>, {'rachel': 0, 'raymond': 42})
>>> 
>>> 
>>> from collections import *
>>> colors = 'red green red blue green red'.split()
>>> 
>>> d = {}
>>> for color in colors:
	d[color] += 1

	

Traceback (most recent call last):
  File "<pyshell#544>", line 2, in <module>
    d[color] += 1
KeyError: 'red'
>>> d = defaultdict(int)
>>> for color in colors:
	d[color] += 1

	
>>> d
defaultdict(<type 'int'>, {'blue': 1, 'green': 2, 'red': 3})
>>> 
>>> 
>>> 
>>> 
>>> # How to group data in Python
>>> # The key is a scalar representing a feature
>>> # The value is a list of elements that have that feature
>>> # {f1: loewthf1, f2: lieswthf2}
>>> 
>>> names = '''  susie raymond sheldon leonard rachel
raj penny sharon david roger sandy mary larry amy
rodney patrica beatrice becky amber dexter bill danny'''.split()
>>> from pprint import print
SyntaxError: invalid syntax
>>> from pprint import pprint
>>> 
>>> 
>>> 
>>> 
>>> names = '''  susie raymond sheldon leonard rachel
raj penny sharon david roger sandy mary larry amy
rodney patrica beatrice becky amber dexter bill danny'''.split()
>>> print 'Group the names by the first letter of the name'
Group the names by the first letter of the name
>>> name = 'raymond'
>>> name[0]
'r'
>>> 
>>> d = defaultdict(list)
>>> for name in names:
	feature = name[0]
	d[feature].append(name)

	
>>> pprint(dict(d))
{'a': ['amy', 'amber'],
 'b': ['beatrice', 'becky', 'bill'],
 'd': ['david', 'dexter', 'danny'],
 'l': ['leonard', 'larry'],
 'm': ['mary'],
 'p': ['penny', 'patrica'],
 'r': ['raymond', 'rachel', 'raj', 'roger', 'rodney'],
 's': ['susie', 'sheldon', 'sharon', 'sandy']}
>>> print 'Group the names by the last letter of the name'
Group the names by the last letter of the name
>>> name = 'raymond'
>>> name[-1]
'd'
>>> d = defaultdict(list)
>>> for name in names:
	feature = name[-1]
	d[feature].append(name)

	
>>> pprint(dict(d))
{'a': ['patrica'],
 'd': ['raymond', 'leonard', 'david'],
 'e': ['susie', 'beatrice'],
 'j': ['raj'],
 'l': ['rachel', 'bill'],
 'n': ['sheldon', 'sharon'],
 'r': ['roger', 'amber', 'dexter'],
 'y': ['penny', 'sandy', 'mary', 'larry', 'amy', 'rodney', 'becky', 'danny']}
>>> name = 'raymond'
>>> len(name)
7
>>> print 'Group the names by the length of the name'
Group the names by the length of the name
>>> d = defaultdict(list)
>>> for name in names:
	feature = len(name)
	d[feature].append(name)

	
>>> pprint(dict(d))
{3: ['raj', 'amy'],
 4: ['mary', 'bill'],
 5: ['susie',
     'penny',
     'david',
     'roger',
     'sandy',
     'larry',
     'becky',
     'amber',
     'danny'],
 6: ['rachel', 'sharon', 'rodney', 'dexter'],
 7: ['raymond', 'sheldon', 'leonard', 'patrica'],
 8: ['beatrice']}
>>> name = 'beatrice'
>>> name.count('e')
2
>>> name.count('z')
0
>>> print 'Group the names by the number of vowels  aeiouy'
Group the names by the number of vowels  aeiouy
>>> 
>>> 
>>> d = defaultdict(list)
>>> for name in names:
	feature = name.count('a') + name.count('e') + name.count('i')
	feature += name.count('o') + name.count('u') + name.count('u') 
	d[feature].append(name)

	
>>> pprint(dict(d))
{1: ['raj',
     'penny',
     'sandy',
     'mary',
     'larry',
     'amy',
     'becky',
     'bill',
     'danny'],
 2: ['raymond',
     'sheldon',
     'rachel',
     'sharon',
     'david',
     'roger',
     'rodney',
     'amber',
     'dexter'],
 3: ['leonard', 'patrica'],
 4: ['susie', 'beatrice']}
>>> for name in names:
	feature = name.count('a') + name.count('e') + name.count('i')
	feature += name.count('o') + name.count('u') + name.count('y')
	d[feature].append(name)

	
>>> d = defaultdict(list)
>>> for name in names:
	feature = name.count('a') + name.count('e') + name.count('i')
	feature += name.count('o') + name.count('u') + name.count('y')
	d[feature].append(name)

	
>>> pprint(dict(d))
{1: ['raj', 'bill'],
 2: ['sheldon',
     'rachel',
     'penny',
     'sharon',
     'david',
     'roger',
     'sandy',
     'mary',
     'larry',
     'amy',
     'becky',
     'amber',
     'dexter',
     'danny'],
 3: ['susie', 'raymond', 'leonard', 'rodney', 'patrica'],
 4: ['beatrice']}
>>> for name in names:
	feature = sum([name.count(vowel) for vowel in 'aeiouy'])
	d[feature].append(name)

	
>>> 
>>> 
>>> 
>>> 
>>> names = '''tom david tom teddy david daniel david tom'''.split()
>>> d = defaultdict(list)
>>> for name in names:
	feature = name[0]
	d[feature].append(name)

	
>>> pprint(dict(d))
{'d': ['david', 'david', 'daniel', 'david'],
 't': ['tom', 'tom', 'teddy', 'tom']}
>>> set(['tom', 'tom', 'teddy', 'tom'])
set(['teddy', 'tom'])
>>> s = set(['tom', 'tom', 'teddy', 'tom'])
>>> s.add('theo')
>>> s
set(['theo', 'teddy', 'tom'])
>>> 
>>> 
>>> 
>>> names = '''tom david tom teddy david daniel david tom'''.split()
>>> d = defaultdict(set)
>>> for name in names:
	feature = name[0]
	d[feature].add(name)

	
>>> pprint(dict(d))
{'d': set(['daniel', 'david']), 't': set(['teddy', 'tom'])}
>>> 
>>> 
>>> c = Counter('abracadabra')
>>> c
Counter({'a': 5, 'r': 2, 'b': 2, 'c': 1, 'd': 1})
>>> c.most_common(2)
[('a', 5), ('r', 2)]
>>> 
>>> colors
['red', 'green', 'red', 'blue', 'green', 'red']
>>> 
>>> 
>>> d = Counter()
>>> for color in colors:
	d[color] += 1

	
>>> d
Counter({'red': 3, 'green': 2, 'blue': 1})
>>> 
>>> Counter(colors)
Counter({'red': 3, 'green': 2, 'blue': 1})
>>> Counter(colors).most_common(2)
[('red', 3), ('green', 2)]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
>>> type(f)
<type 'file'>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
>>> dir(f)
['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines']
>>> type(play)
<type 'str'>
>>> f
<open file 'notes/hamlet.txt', mode 'r' at 0x104176d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
>>> f
<closed file 'notes/hamlet.txt', mode 'r' at 0x104276d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/frequency.py", line 5, in <module>
    print len(play) / 0
ZeroDivisionError: integer division or modulo by zero
>>> f
<open file 'notes/hamlet.txt', mode 'r' at 0x103877d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/frequency.py", line 6, in <module>
    print len(play) / 0
ZeroDivisionError: integer division or modulo by zero
>>> f
<closed file 'notes/hamlet.txt', mode 'r' at 0x101774d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/frequency.py", line 5, in <module>
    print len(play) / 0
ZeroDivisionError: integer division or modulo by zero
>>> f
<closed file 'notes/hamlet.txt', mode 'r' at 0x1038b1d20>
>>> len(play)
202238
>>> print play[:300]
The Tragedy of Hamlet, Prince of Denmark
Shakespeare homepage | Hamlet | Entire play
ACT I
SCENE I. Elsinore. A platform before the castle.

    FRANCISCO at his post. Enter to him BERNARDO 

BERNARDO

    Who's there?

FRANCISCO

    Nay, answer me: stand, and unfold yourself.

BERNA
>>> words = play.split()
>>> type(words)
<type 'list'>
>>> len(words)
32013
>>> print words[:30]
['The', 'Tragedy', 'of', 'Hamlet,', 'Prince', 'of', 'Denmark', 'Shakespeare', 'homepage', '|', 'Hamlet', '|', 'Entire', 'play', 'ACT', 'I', 'SCENE', 'I.', 'Elsinore.', 'A', 'platform', 'before', 'the', 'castle.', 'FRANCISCO', 'at', 'his', 'post.', 'Enter', 'to']
>>> for word in words[:30]:
	print word

	
The
Tragedy
of
Hamlet,
Prince
of
Denmark
Shakespeare
homepage
|
Hamlet
|
Entire
play
ACT
I
SCENE
I.
Elsinore.
A
platform
before
the
castle.
FRANCISCO
at
his
post.
Enter
to
>>> re.findall(r'\w+', "Don't you forget about me")

Traceback (most recent call last):
  File "<pyshell#665>", line 1, in <module>
    re.findall(r'\w+', "Don't you forget about me")
NameError: name 're' is not defined
>>> import re
>>> re.findall(r'\w+', "Don't you forget about me")
['Don', 't', 'you', 'forget', 'about', 'me']
>>> re.findall(r'\w+', "2. Don't you forget about me")
['2', 'Don', 't', 'you', 'forget', 'about', 'me']
>>> re.findall(r'\w+', "2. Don't you forget about me. HP re-invent yourself")
['2', 'Don', 't', 'you', 'forget', 'about', 'me', 'HP', 're', 'invent', 'yourself']
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
>>> for word in words[:30]:
	print word

	
The
Tragedy
of
Hamlet
Prince
of
Denmark
Shakespeare
homepage
Hamlet
Entire
play
ACT
I
SCENE
I
Elsinore
A
platform
before
the
castle
FRANCISCO
at
his
post
Enter
to
him
BERNARDO
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
>>> for word in words[:30]:
	print word

	
the
tragedy
of
hamlet
prince
of
denmark
shakespeare
homepage
hamlet
entire
play
act
i
scene
i
elsinore
a
platform
before
the
castle
francisco
at
his
post
enter
to
him
bernardo
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj134/frequency.py", line 10, in <module>
    print Counter(words).most_common(50)
NameError: name 'Counter' is not defined
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137), ('and', 963), ('to', 736), ('of', 669), ('you', 547), ('i', 540), ('a', 527), ('my', 513), ('hamlet', 461), ('in', 435), ('it', 415), ('that', 388), ('is', 339), ('not', 312), ('lord', 308), ('his', 296), ('this', 294), ('but', 268), ('with', 267), ('for', 247), ('your', 242), ('me', 232), ('be', 226), ('as', 220), ('he', 215), ('what', 204), ('so', 196), ('him', 196), ('king', 194), ('have', 179), ('will', 169), ('horatio', 157), ('do', 151), ('no', 141), ('we', 139), ('are', 131), ('on', 126), ('all', 120), ('claudius', 120), ('our', 118), ('by', 117), ('queen', 116), ('polonius', 116), ('shall', 114), ('if', 112), ('or', 112), ('o', 110), ('good', 107), ('come', 106), ('they', 103)]
>>> 
>>> 
>>> f
<closed file 'notes/hamlet.txt', mode 'r' at 0x104877d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137), ('and', 963), ('to', 736), ('of', 669), ('you', 547), ('i', 540), ('a', 527), ('my', 513), ('hamlet', 461), ('in', 435), ('it', 415), ('that', 388), ('is', 339), ('not', 312), ('lord', 308), ('his', 296), ('this', 294), ('but', 268), ('with', 267), ('for', 247), ('your', 242), ('me', 232), ('be', 226), ('as', 220), ('he', 215), ('what', 204), ('so', 196), ('him', 196), ('king', 194), ('have', 179), ('will', 169), ('horatio', 157), ('do', 151), ('no', 141), ('we', 139), ('are', 131), ('on', 126), ('all', 120), ('claudius', 120), ('our', 118), ('by', 117), ('queen', 116), ('polonius', 116), ('shall', 114), ('if', 112), ('or', 112), ('o', 110), ('good', 107), ('come', 106), ('they', 103)]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435),
 ('it', 415),
 ('that', 388),
 ('is', 339),
 ('not', 312),
 ('lord', 308),
 ('his', 296),
 ('this', 294),
 ('but', 268),
 ('with', 267),
 ('for', 247),
 ('your', 242),
 ('me', 232),
 ('be', 226),
 ('as', 220),
 ('he', 215),
 ('what', 204),
 ('so', 196),
 ('him', 196),
 ('king', 194),
 ('have', 179),
 ('will', 169),
 ('horatio', 157),
 ('do', 151),
 ('no', 141),
 ('we', 139),
 ('are', 131),
 ('on', 126),
 ('all', 120),
 ('claudius', 120),
 ('our', 118),
 ('by', 117),
 ('queen', 116),
 ('polonius', 116),
 ('shall', 114),
 ('if', 112),
 ('or', 112),
 ('o', 110),
 ('good', 107),
 ('come', 106),
 ('they', 103)]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
>>> s = '"-v=10 'hello world' happy func 5 + 6 $USER `pwd`"
SyntaxError: invalid syntax
>>> s = "-v=10 'hello world' happy func 5 + 6 $USER `pwd`"
>>> import shlex
>>> shlex.split(s)
['-v=10', 'hello world', 'happy', 'func', '5', '+', '6', '$USER', '`pwd`']
>>> import os
>>> os.environ['USER']
'raymond'
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/frequency.py =========
Usage:  frequency filename
>>> 
>>> 
>>> 
>>> import os
>>> os.system('cal 2 2012')
0
>>> os.system('cal 2 2012 > a.tmp')
0
>>> with open('a.tmp') as f:
	output = f.read()

	
>>> import os
>>> os.remove('a.tmp')
>>> type(output)
<type 'str'>
>>> print output
   February 2012
Su Mo Tu We Th Fr Sa
          1  2  3  4
 5  6  7  8  9 10 11
12 13 14 15 16 17 18
19 20 21 22 23 24 25
26 27 28 29


>>> import subprocess
>>> output = subprocess.check_output('cal 2 2012', shell=True)
>>> print output
   February 2012
Su Mo Tu We Th Fr Sa
          1  2  3  4
 5  6  7  8  9 10 11
12 13 14 15 16 17 18
19 20 21 22 23 24 25
26 27 28 29


>>> subprocess.check_output('echo $USER', shell=True)
'raymond\n'
>>> output = subprocess.check_output(['cal', '2', '2012'])
>>> 
>>> output = subprocess.check_output('cal 2 2012', shell=True)
>>> 
>>> 
>>> import subprocess
>>> output = subprocess.check_output('netstat -a', shell=True)
>>> print output.splitlines()[:5]
['Active Internet connections (including servers)', 'Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)    ', 'tcp4       0      0  10.154.37.89.53051     ec2-54-86-89-255.https CLOSE_WAIT ', 'tcp4      31      0  10.154.37.89.53046     server-205-251-2.https CLOSE_WAIT ', 'tcp4       0      0  10.154.37.89.53039     ash-rc1-1d.sjc.d.https ESTABLISHED']
>>> # system command popen  popen2 popen3 popen4 --> subprocess
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/with_demo.py =========
202238
>>> f
<closed file 'notes/hamlet.txt', mode 'r' at 0x104176d20>
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/with_demo.py =========
202238
202238
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj134/with_demo.py =========
202238
202238
Critical section 1
Critical section 2
>>> 
